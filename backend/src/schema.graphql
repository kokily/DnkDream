type CheckUserResponse {
  ok: Boolean!
  error: String
  user: User
}

type Query {
  CheckUser: CheckUserResponse!
  ListPosts(cursor: ID, title: String): ListPostsResponse!
  ReadPost(id: ID!): ReadPostResponse!
  post: Post
  ListUsers(cursor: ID, username: String): ListUsersResponse!
  ReadUser(id: ID!): ReadUserResponse!
  user: User
}

type LoginUserResponse {
  ok: Boolean!
  error: String
  token: String
}

type Mutation {
  LoginUser(username: String!, password: String!): LoginUserResponse!
  RegisterUser(username: String!, password: String!): RegisterUserResponse!
  SucedeUser: SucedeUserResponse!
  UpdateUser(password: String!): UpdateUserResponse!
  AddPost(title: String!, body: String!): AddPostResponse!
  RemovePost(id: ID!): RemovePostResponse!
  UpdatePost(id: ID!, title: String, body: String): UpdatePostResponse!
  RemoveUser(id: ID!): RemoveUserResponse!
}

type RegisterUserResponse {
  ok: Boolean!
  error: String
}

type SucedeUserResponse {
  ok: Boolean!
  error: String
}

type UpdateUserResponse {
  ok: Boolean!
  error: String
  user: User
}

scalar Date

type AddPostResponse {
  ok: Boolean!
  error: String
  post: Post
}

type ListPostsResponse {
  ok: Boolean!
  error: String
  posts: [Post]
}

type ReadPostResponse {
  ok: Boolean!
  error: String
  post: Post
}

type RemovePostResponse {
  ok: Boolean!
  error: String
}

type Post {
  id: ID!
  title: String!
  body: String!
  createdAt: Date!
  updatedAt: Date
}

type UpdatePostResponse {
  ok: Boolean!
  error: String
  post: Post
}

type ListUsersResponse {
  ok: Boolean!
  error: String
  users: [User]
}

type ReadUserResponse {
  ok: Boolean!
  error: String
  user: User
}

type RemoveUserResponse {
  ok: Boolean!
  error: String
}

type User {
  id: ID!
  username: String!
  password: String!
  admin: Boolean!
  createdAt: Date!
  updatedAt: Date
}
